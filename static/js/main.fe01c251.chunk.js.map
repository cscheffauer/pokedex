{"version":3,"sources":["components/__generated__/CardListQuery.graphql.js","components/Card.js","components/Layout/LoadingSpinner/LoadingSpinner.js","environment.js","components/CardList.js","actions.js","constants.js","components/SearchBox.js","components/ErrorBoundry.js","components/Layout/TechnologyInfoButton/TechnologyInfoButton.js","components/Layout/ImprintButton/ImprintButton.js","containers/MainPage/MainPage.js","containers/App.js","serviceWorker.js","reducers.js","index.js","components/Layout/Scroll/Scroll.js"],"names":["node","v0","v1","v2","v3","v4","v5","hash","module","exports","Card","id","name","image","types","height","weight","attacks","evolutions","expanded","onExpandedChange","searchBoxInput","searchForEvolution","toggleOnExpandedChange","undefined","triangle","className","onClick","draggable","alt","src","style","backgroundImage","length","minimum","maximum","fast","map","attack","i","key","damage","special","evolution","onEvolutionClick","marginTop","LoadingSpinner","swapiLabel","cache","QueryResponseCache","size","ttl","environment","Environment","network","Network","create","operation","variables","cacheConfig","queryID","text","isMutation","operationKind","isQuery","forceFetch","force","fromCache","get","fetch","method","headers","body","JSON","stringify","query","then","response","json","set","clear","store","Store","RecordSource","connect","state","changeExpanded","dispatch","type","payload","setExpanded","searchBoxRef","setSearchChange","current","focus","render","error","props","pokemons","filter","pokemon","toLowerCase","includes","index","SearchBox","ref","aria-label","placeholder","onChange","e","target","value","ErrorBoundry","hasError","this","setState","width","textAlign","children","Component","TechnologyInfoButton","onRouteChange","ImprintButton","AsyncPageTechnologyInfo","lazy","AsyncPageImprint","MainPage","getRouteComponent","route","Scroll","scrollContainer","fallback","React","createRef","page","App","changeRoute","searchField","searchPokemon","setRoute","onSearchChange","event","Boolean","window","location","hostname","match","initialRoute","initialStateSearch","initialExpanded","logger","createLogger","rootReducer","combineReducers","action","Object","assign","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fe01c251.chunk.js","sourcesContent":["/**\n * @flow\n * @relayHash 8fad0280661a2feb3d89d0c650f08703\n */\n\n/* eslint-disable */\n\n'use strict';\n\n/*::\nimport type { ConcreteRequest } from 'relay-runtime';\nexport type CardListQueryVariables = {||};\nexport type CardListQueryResponse = {|\n  +pokemons: ?$ReadOnlyArray<?{|\n    +id: string,\n    +name: ?string,\n    +image: ?string,\n    +types: ?$ReadOnlyArray<?string>,\n    +height: ?{|\n      +minimum: ?string,\n      +maximum: ?string,\n    |},\n    +weight: ?{|\n      +minimum: ?string,\n      +maximum: ?string,\n    |},\n    +attacks: ?{|\n      +fast: ?$ReadOnlyArray<?{|\n        +name: ?string,\n        +damage: ?number,\n      |}>,\n      +special: ?$ReadOnlyArray<?{|\n        +name: ?string,\n        +damage: ?number,\n      |}>,\n    |},\n    +evolutions: ?$ReadOnlyArray<?{|\n      +id: string,\n      +name: ?string,\n      +image: ?string,\n    |}>,\n  |}>\n|};\nexport type CardListQuery = {|\n  variables: CardListQueryVariables,\n  response: CardListQueryResponse,\n|};\n*/\n\n\n/*\nquery CardListQuery {\n  pokemons(first: 151) {\n    id\n    name\n    image\n    types\n    height {\n      minimum\n      maximum\n    }\n    weight {\n      minimum\n      maximum\n    }\n    attacks {\n      fast {\n        name\n        damage\n      }\n      special {\n        name\n        damage\n      }\n    }\n    evolutions {\n      id\n      name\n      image\n    }\n  }\n}\n*/\n\nconst node/*: ConcreteRequest*/ = (function(){\nvar v0 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"id\",\n  \"args\": null,\n  \"storageKey\": null\n},\nv1 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"name\",\n  \"args\": null,\n  \"storageKey\": null\n},\nv2 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"image\",\n  \"args\": null,\n  \"storageKey\": null\n},\nv3 = [\n  {\n    \"kind\": \"ScalarField\",\n    \"alias\": null,\n    \"name\": \"minimum\",\n    \"args\": null,\n    \"storageKey\": null\n  },\n  {\n    \"kind\": \"ScalarField\",\n    \"alias\": null,\n    \"name\": \"maximum\",\n    \"args\": null,\n    \"storageKey\": null\n  }\n],\nv4 = [\n  (v1/*: any*/),\n  {\n    \"kind\": \"ScalarField\",\n    \"alias\": null,\n    \"name\": \"damage\",\n    \"args\": null,\n    \"storageKey\": null\n  }\n],\nv5 = [\n  {\n    \"kind\": \"LinkedField\",\n    \"alias\": null,\n    \"name\": \"pokemons\",\n    \"storageKey\": \"pokemons(first:151)\",\n    \"args\": [\n      {\n        \"kind\": \"Literal\",\n        \"name\": \"first\",\n        \"value\": 151\n      }\n    ],\n    \"concreteType\": \"Pokemon\",\n    \"plural\": true,\n    \"selections\": [\n      (v0/*: any*/),\n      (v1/*: any*/),\n      (v2/*: any*/),\n      {\n        \"kind\": \"ScalarField\",\n        \"alias\": null,\n        \"name\": \"types\",\n        \"args\": null,\n        \"storageKey\": null\n      },\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": null,\n        \"name\": \"height\",\n        \"storageKey\": null,\n        \"args\": null,\n        \"concreteType\": \"PokemonDimension\",\n        \"plural\": false,\n        \"selections\": (v3/*: any*/)\n      },\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": null,\n        \"name\": \"weight\",\n        \"storageKey\": null,\n        \"args\": null,\n        \"concreteType\": \"PokemonDimension\",\n        \"plural\": false,\n        \"selections\": (v3/*: any*/)\n      },\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": null,\n        \"name\": \"attacks\",\n        \"storageKey\": null,\n        \"args\": null,\n        \"concreteType\": \"PokemonAttack\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"LinkedField\",\n            \"alias\": null,\n            \"name\": \"fast\",\n            \"storageKey\": null,\n            \"args\": null,\n            \"concreteType\": \"Attack\",\n            \"plural\": true,\n            \"selections\": (v4/*: any*/)\n          },\n          {\n            \"kind\": \"LinkedField\",\n            \"alias\": null,\n            \"name\": \"special\",\n            \"storageKey\": null,\n            \"args\": null,\n            \"concreteType\": \"Attack\",\n            \"plural\": true,\n            \"selections\": (v4/*: any*/)\n          }\n        ]\n      },\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": null,\n        \"name\": \"evolutions\",\n        \"storageKey\": null,\n        \"args\": null,\n        \"concreteType\": \"Pokemon\",\n        \"plural\": true,\n        \"selections\": [\n          (v0/*: any*/),\n          (v1/*: any*/),\n          (v2/*: any*/)\n        ]\n      }\n    ]\n  }\n];\nreturn {\n  \"kind\": \"Request\",\n  \"fragment\": {\n    \"kind\": \"Fragment\",\n    \"name\": \"CardListQuery\",\n    \"type\": \"Query\",\n    \"metadata\": null,\n    \"argumentDefinitions\": [],\n    \"selections\": (v5/*: any*/)\n  },\n  \"operation\": {\n    \"kind\": \"Operation\",\n    \"name\": \"CardListQuery\",\n    \"argumentDefinitions\": [],\n    \"selections\": (v5/*: any*/)\n  },\n  \"params\": {\n    \"operationKind\": \"query\",\n    \"name\": \"CardListQuery\",\n    \"id\": null,\n    \"text\": \"query CardListQuery {\\n  pokemons(first: 151) {\\n    id\\n    name\\n    image\\n    types\\n    height {\\n      minimum\\n      maximum\\n    }\\n    weight {\\n      minimum\\n      maximum\\n    }\\n    attacks {\\n      fast {\\n        name\\n        damage\\n      }\\n      special {\\n        name\\n        damage\\n      }\\n    }\\n    evolutions {\\n      id\\n      name\\n      image\\n    }\\n  }\\n}\\n\",\n    \"metadata\": {}\n  }\n};\n})();\n// prettier-ignore\n(node/*: any*/).hash = '0352a9310eb8db409c5f0e6598793405';\n\nmodule.exports = node;\n","import React from 'react';\n\nimport \"./Card.css\";\n\n\nconst Card = ({ id, name, image, types, height, weight, attacks, evolutions, expanded, onExpandedChange, searchBoxInput, searchForEvolution }) => {         //receiving props and destructuring them in the brackets\n\n    const toggleOnExpandedChange = (id) => {\n        if (id === expanded) {\n            onExpandedChange(undefined);\n        } else {\n            onExpandedChange(id);\n        }\n    }\n\n    const onEvolutionClick = (id, name) => {\n        if (searchBoxInput !== \"\") {\n            searchForEvolution(name);\n            toggleOnExpandedChange(id);\n        } else {\n            toggleOnExpandedChange(id);\n        }\n    }\n\n    const triangle = (expanded === id) ? 'pokemonOpenTriangle' : 'pokemonClosedTriangle';\n    return (\n        <div className=\"cardWrapper noselect\">\n\n            <div onClick={() => toggleOnExpandedChange(id)} className='card'>\n                {\n                    expanded === id &&\n                    <div onClick={() => toggleOnExpandedChange(id)} className=\"cardBorder\" />\n                }\n                {\n                    !(expanded === id) &&\n                    <img draggable=\"false\" alt={`image ` + name} src={image} />\n                }\n                <div className='pokemonNameSection'>\n                    <p className={expanded === id ? `pokemonNameExpanded` : undefined}>{name}</p>\n                </div>\n                <div className='pokemonTypeSection'>\n                    <div className='pokemonTypeOverlay'>\n                        <div className='pokemonTypeOverlayBackground' style={{ backgroundImage: `url('images/textures/${types[0]}.png')` }} />\n                    </div>\n\n                    {\n                        types.length === 2 ?\n                            <>\n                                <div className='pokemonTypePositionOne pokemonType'>\n                                    <p>{types[0]}</p>\n                                </div>\n                                <div className='pokemonTypePositionTwo pokemonType'>\n                                    <p>{types[1]}</p>\n                                </div>\n                            </>\n                            :\n                            <div className='pokemonTypePosition pokemonType'>\n                                <p>{types}</p>\n                            </div>\n                    }\n                    <div className={`trianglePosition ` + triangle}></div>\n                </div>\n            </div>\n            {\n                expanded === id &&\n                <div className=\"cardDetails\">\n                    <div>\n                        <h3>Facts</h3>\n                        <div className=\"factsImageWrapper\">\n                            <img draggable=\"false\" alt={`image ` + name} src={image} />\n                        </div>\n                        <div className=\"factsHeightWrapper\">\n                            <div>\n                                <img draggable=\"false\" alt=\"height_icon\" src={`images/facts/height.png`} />\n                            </div>\n                            <div>\n                                <p>Min: {height.minimum}</p>\n                                <p>Max: {height.maximum}</p>\n                            </div>\n\n                        </div>\n                        <div className=\"factsWeightWrapper\">\n                            <div>\n                                <img draggable=\"false\" alt=\"weight_icon\" src={`images/facts/weight.png`} />\n                            </div>\n                            <div>\n                                <p>Min: {weight.minimum}</p>\n                                <p>Max: {weight.maximum}</p>\n                            </div>\n                        </div>\n                    </div>\n                    <div>\n                        <h3>Attacks</h3>\n                        <div className=\"attacksWrapper\">\n                            <div>\n                                <p>FAST</p>\n                                {attacks.fast === null ?\n                                    <p className=\"noAttacksFoundText\">No FAST Attacks found!</p> :\n                                    attacks.fast.map((attack, i) =>\n                                        attack.name !== null &&\n                                        <div key={i} className=\"fastAttack attackCard\">\n                                            <p className=\"attackName\">{attack.name}</p>\n                                            <p className=\"attackDamage\">{attack.damage}</p>\n                                        </div>\n\n                                    )}\n                            </div>\n                            <div>\n                                <p>SPECIAL</p>\n                                {attacks.special === null ?\n                                    <p className=\"noAttacksFoundText\">No FAST Attacks found!</p> :\n                                    attacks.special.map((attack, i) =>\n                                        <div key={i} className=\"specialAttack attackCard\">\n                                            <p className=\"attackName\">{attack.name}</p>\n                                            <p className=\"attackDamage\">{attack.damage}</p>\n                                        </div>\n                                    )}\n                            </div>\n                        </div>\n                    </div>\n                    <div>\n                        <h3>Evolutions</h3>\n                        {evolutions === null ?\n                            <p className=\"noEvolutionFoundText\">Final evolution</p> :\n                            evolutions.map((evolution, i) =>\n                                <div key={i} className=\"evolutionsImageWrapper\">\n                                    <img onClick={() => onEvolutionClick(evolution.id, evolution.name)} style={evolutions.length > 2 ? { marginTop: 15, height: 55 } : {}} draggable=\"false\" alt={`image ` + name} src={evolution.image} />\n                                    <p>{evolution.name}</p>\n                                </div>\n                            )}\n                    </div>\n                </div>\n\n            }\n        </div >\n    );\n}\n\nexport default Card;\n\n","import React from 'react'\n\nimport './LoadingSpinner.css';\n\n\nconst LoadingSpinner = ({ swapiLabel }) => {\n    return (\n        <div className=\"loadingContainer\">\n            <div className=\"circleLoading\"></div>\n            {\n                swapiLabel &&\n                <p className=\"morePeopleLoading\">catching 'em all</p>\n            }\n        </div>\n    );\n}\n\nexport default LoadingSpinner;\n","import {\n    Environment,\n    Network,\n    QueryResponseCache,\n    RecordSource,\n    Store,\n} from 'relay-runtime';\n\nconst oneMinute = 60 * 1000;\nconst cache = new QueryResponseCache({ size: 150, ttl: 5 * oneMinute });\n\n\nfunction fetchQuery(\n    operation,\n    variables,\n    cacheConfig,\n) {\n    const queryID = operation.text;\n    const isMutation = operation.operationKind === 'mutation';\n    const isQuery = operation.operationKind === 'query';\n    const forceFetch = cacheConfig && cacheConfig.force;\n\n    // Try to get data from cache on queries\n    const fromCache = cache.get(queryID, variables);\n    if (\n        isQuery &&\n        fromCache !== null &&\n        !forceFetch\n    ) {\n        return fromCache;\n    }\n\n    return fetch('https://graphql-pokemon.now.sh/graphql', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            query: operation.text,\n            variables,\n        }),\n    }).then(response => {\n        return response.json();\n    }).then(json => {\n        // Update cache on queries\n        if (isQuery && json) {\n            cache.set(queryID, variables, json);\n        }\n        // Clear cache on mutations\n        if (isMutation) {\n            cache.clear();\n        }\n\n        return json;\n    });\n}\n\nconst environment = new Environment({\n    network: Network.create(fetchQuery),\n    store: new Store(new RecordSource()),\n});\n\nexport default environment;","import React from 'react';\nimport { connect } from 'react-redux';\nimport Card from './Card';\nimport LoadingSpinner from './Layout/LoadingSpinner/LoadingSpinner'\nimport { QueryRenderer } from 'react-relay';\nimport graphql from 'babel-plugin-relay/macro';\n\nimport environment from '../environment';\nimport './CardList.css';\n\nimport { setExpanded } from '../actions'\n\nconst mapStateToProps = state => {\n    return {\n        expanded: state.changeExpanded.id,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onExpandedChange: (id) => dispatch(setExpanded(id)),\n    }\n}\n\n\n\nconst CardList = ({ searchBoxRef, searchBoxInput, setSearchChange, expanded, onExpandedChange }) => {          //using people array as props\n\n    const searchForEvolution = (name) => {\n        setSearchChange(name);\n        searchBoxRef.current.focus();\n    }\n\n\n    return (\n        <QueryRenderer\n            environment={environment}\n            query={graphql`\n                query CardListQuery {\n                    pokemons(first: 151) {\n                        id,\n                        name,\n                        image,\n                        types,\n                        height{minimum, maximum},\n  \t\t\t\t        weight{minimum, maximum},\n                        attacks{fast{name,damage},special{name,damage}},\n  \t\t\t\t        evolutions{id,name,image}\n                    } \n                }\n            `}\n            variables={{}}\n            render={({ error, props }) => {\n                if (error) {\n                    return <div>Error!</div>;\n                }\n                if (!props) {\n                    return <LoadingSpinner swapiLabel={true} />;\n                }\n                const filteredPokemon = props.pokemons.filter(pokemon => {\n                    return pokemon.name.toLowerCase().includes(searchBoxInput.toLowerCase());\n                });\n\n                return filteredPokemon.map((pokemon, i) => {\n                    return (\n                        <Card\n                            key={i}\n                            index={i}\n                            id={pokemon.id}\n                            name={pokemon.name}\n                            image={pokemon.image}\n                            types={pokemon.types}\n                            height={pokemon.height}\n                            weight={pokemon.weight}\n                            attacks={pokemon.attacks}\n                            evolutions={pokemon.evolutions}\n                            expanded={expanded}\n                            onExpandedChange={onExpandedChange}\n                            searchBoxInput={searchBoxInput}\n                            searchForEvolution={searchForEvolution}\n                        />\n                    )\n                })\n            }}\n        />\n    );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CardList);","import {\n    CHANGE_SEARCH_FIELD,\n    CHANGE_EXPANDED,\n    CHANGE_ROUTE\n} from './constants'       //get constants form constants file\n\n\n//first action in here - this action will receive input of text which the user types - it will return a object with type and payload\n//this action will send the object on to the reducer\nexport const setRoute = (route) => ({\n    type: CHANGE_ROUTE,                  //constants are usually capitalized - we use a variable here to avoid misspelling \n    payload: route\n})\n\n\n\n//first action in here - this action will receive input of text which the user types - it will return a object with type and payload\n//this action will send the object on to the reducer\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,                  //constants are usually capitalized - we use a variable here to avoid misspelling \n    payload: text\n})\n\n\nexport const setExpanded = (id) => ({\n    type: CHANGE_EXPANDED,                  //constants are usually capitalized - we use a variable here to avoid misspelling \n    payload: id\n})\n\n","/*\n* REDUX\n*/\n\nexport const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const CHANGE_EXPANDED = 'CHANGE_EXPANDED';\nexport const CHANGE_ROUTE = 'CHANGE_ROUTE';\n\n/*\n* REACT\n*/\nexport const INITIAL_ROUTE = 'main';\nexport const IMPRINT_ROUTE = 'imprint';\nexport const TECHNOLOGYINFO_ROUTE = 'technology';","import React from 'react';\n\nimport './SearchBox.css';\n\nconst SearchBox = ({ searchBoxRef, searchBoxInput, setSearchChange }) => {\n    return (\n        <div className=\"searchboxWrapper\">\n            <input\n                ref={searchBoxRef}\n                aria-label='Search Characters'\n                className=\"searchBox\"\n                type='search'\n                placeholder='SEARCH'\n                onChange={(e) => setSearchChange(e.target.value)}\n                value={searchBoxInput}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch() {        //if an error appears, this function will run = like try/catch in Java\n        this.setState({ hasError: true })       //the state will be set to hasError=true and it will be rerendered \n    }\n\n    render() {\n        if (this.state.hasError) {      //if the error appeared, a proper error message will be displayed\n            return <h3 style={{ width: \"100%\", textAlign: \"center\" }}>An error appeared - pls contact the owner of the page!</h3>\n        }\n        return this.props.children      //will render the cardlist component when no errors appeared\n    }\n}\n\nexport default ErrorBoundry;","import React from 'react'\n\nimport './TechnologyInfoButton.css';\nimport { TECHNOLOGYINFO_ROUTE } from '../../../constants';\n\n\nconst TechnologyInfoButton = ({ onRouteChange }) => {\n    return <div className=\"TechnologyInfoButtonContainer\"> <img alt=\"Technology Info Button\" className=\"TechnologyInfoButton\" onClick={() => onRouteChange(TECHNOLOGYINFO_ROUTE)} src=\"images/code.png\"></img></div>\n}\n\nexport default TechnologyInfoButton;","import React from 'react'\n\nimport './ImprintButton.css';\nimport { IMPRINT_ROUTE } from '../../../constants';\n\n\nconst ImprintButton = ({ onRouteChange }) => {\n    return <div className=\"ImprintButtonContainer\"> <img alt=\"Imprint Button\" className=\"ImprintButton\" onClick={() => onRouteChange(IMPRINT_ROUTE)} src=\"images/imprint.png\"></img> </div>\n}\n\nexport default ImprintButton;","import React, { Component, Suspense, lazy } from 'react';   //destructuring (instead of React.Component)\n\nimport {\n    INITIAL_ROUTE,\n    IMPRINT_ROUTE,\n    TECHNOLOGYINFO_ROUTE\n} from '../../constants'       //get constants form constants file\n\nimport CardList from '../../components/CardList';\nimport SearchBox from '../../components/SearchBox';\nimport Scroll from '../../components/Layout/Scroll/Scroll';\nimport ErrorBoundry from '../../components/ErrorBoundry';\nimport LoadingSpinner from '../../components/Layout/LoadingSpinner/LoadingSpinner';\nimport TechnologyInfoButton from '../../components/Layout/TechnologyInfoButton/TechnologyInfoButton';\n\n\nimport './MainPage.css'; //to import the appropriate css file for this component\nimport ImprintButton from '../../components/Layout/ImprintButton/ImprintButton';\n\n\nconst AsyncPageTechnologyInfo = lazy(() => import('../../components/Pages/TechnologyInfo/TechnologyInfo'));\nconst AsyncPageImprint = lazy(() => import('../../components/Pages/Imprint/Imprint'));\n\nclass MainPage extends Component {   //class App will use the component lib / Component expects that there is a render function in this class\n\n    constructor() {\n        super();\n        this.state = {\n            searchBoxInput: \"\",\n            scrollContainer: React.createRef(),\n            searchBoxRef: React.createRef(),\n        }\n\n    }\n\n    setSearchChange = (searchBoxInput) => {\n        this.setState({ searchBoxInput: searchBoxInput });\n    }\n\n    getRouteComponent = (route) => {\n\n        if (route === INITIAL_ROUTE) {\n            return (\n                <>\n                    <SearchBox searchBoxRef={this.state.searchBoxRef} searchBoxInput={this.state.searchBoxInput} setSearchChange={this.setSearchChange} />\n                    <Scroll scrollContainer={this.state.scrollContainer}>\n                        <ErrorBoundry>\n                            {\n                                <CardList searchBoxRef={this.state.searchBoxRef} searchBoxInput={this.state.searchBoxInput} setSearchChange={this.setSearchChange} />\n                            }\n                        </ErrorBoundry>\n                    </Scroll>\n                </>\n            )\n        } else if (route === IMPRINT_ROUTE) {\n            return (\n                <Suspense fallback={<LoadingSpinner swapiLabel={false} />}>\n                    <AsyncPageImprint />\n                </Suspense>\n            )\n        } else if (route === TECHNOLOGYINFO_ROUTE) {\n            return (\n                <Suspense fallback={<LoadingSpinner swapiLabel={false} />}>\n                    <AsyncPageTechnologyInfo />\n                </Suspense>\n            )\n        }\n    }\n\n    render() {\n        const { route, onRouteChange } = this.props;\n        let page = this.getRouteComponent(route);\n\n        const setInitialRoute = () => {\n            (route !== INITIAL_ROUTE) && onRouteChange(INITIAL_ROUTE);\n        }\n\n        return (\n            <>\n                <div className='wrapper'>\n                    <div className='main'>\n                        {page}\n                        <img onClick={() => setInitialRoute()} alt='pokeball' className={`pokeball ` + ((route !== INITIAL_ROUTE) ? `pokeballHover` : ``)} src=\"images/pokeball_grey.png\" />\n                    </div>\n                </div>\n                <TechnologyInfoButton onRouteChange={onRouteChange} />\n                <ImprintButton onRouteChange={onRouteChange} />\n            </>\n        )\n    }\n}\nexport default MainPage;\n","import React, { Component } from 'react';   //destructuring (instead of React.Component)\nimport { connect } from 'react-redux';\nimport MainPage from './MainPage/MainPage'\n\nimport { setRoute, setSearchField } from '../actions'\n\nconst mapStateToProps = state => {\n    return {\n        route: state.changeRoute.route,\n        searchField: state.searchPokemon.searchField,            //prop searchfield will get the state of the searchPeople.searchField\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        //onSearchChange is a function which will pass the event to it's inner \n        //there the dispatch will get called which will call the setSearchField action in redux and \n        //it will hand over the event.target.value (which is the stuff typed in the search box)\n        onRouteChange: (route) => dispatch(setRoute(route)),\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    }\n}\n\nclass App extends Component {   //only the react \n    render() {\n        return <MainPage {...this.props} />\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n//connect is a higher order function - will return another function -> that's why it is written that way above\n//\n//connect() is subscribed to the redux store now and it accepts 2 params: \n//1st is mapStateToProps: what state the component is interested in\n//2nd is mapDispatchToProps: ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    console.log(\"process env: \" + process.env.PUBLIC_URL);\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n\n  }\n}\n\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n\n","import {\n    INITIAL_ROUTE,\n    CHANGE_SEARCH_FIELD,\n    CHANGE_EXPANDED,\n    CHANGE_ROUTE\n} from './constants'       //get constants form constants file\n\n\n\n\n\n\n/**\n * CHANGEROUTE REDUCER\n */\n\n\n//define the initialstate in the reducer \nconst initialRoute = {\n    route: INITIAL_ROUTE         //initial object in the redux store\n}\n\n//searchPeople function -> use default params (initialState, empty action object)\n//reducers get a input of a state and action -> if this one get something we care about (like searching people), we will do something\nexport const changeRoute = (state = initialRoute, action = {}) => {\n    switch (action.type) {\n        case CHANGE_ROUTE:       //if a CHANGE_SEARCH_FIELD action comes in, we will do something\n            return Object.assign({}, state, { route: action.payload })\n        //1st param= new object\n        //2nd param= state we receiving\n        //3rd param=is what we want to change in the state\n        //so what we return is a new object with everything in the state + new searchField -> 2nd principle: State is read only\n        default:\n            return state    //if a other action comes in, return the state as it was passed over and do not change anything\n    }\n}\n\n\n\n\n/**\n * SEARCHPEOPLE REDUCER\n */\n\n\n//define the initialstate in the reducer \nconst initialStateSearch = {\n    searchField: ''         //initial object in the redux store\n}\n\n//searchPeople function -> use default params (initialState, empty action object)\n//reducers get a input of a state and action -> if this one get something we care about (like searching people), we will do something\nexport const searchPokemon = (state = initialStateSearch, action = {}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:       //if a CHANGE_SEARCH_FIELD action comes in, we will do something\n            return Object.assign({}, state, { searchField: action.payload })\n        //1st param= new object\n        //2nd param= state we receiving\n        //3rd param=is what we want to change in the state\n        //so what we return is a new object with everything in the state + new searchField -> 2nd principle: State is read only\n        default:\n            return state    //if a other action comes in, return the state as it was passed over and do not change anything\n    }\n}\n\n\n/**\n * CHANGEROUTE REDUCER\n */\n\n\n//define the initialstate in the reducer \nconst initialExpanded = {\n    id: undefined,\n};\n\n//searchPeople function -> use default params (initialState, empty action object)\n//reducers get a input of a state and action -> if this one get something we care about (like searching people), we will do something\nexport const changeExpanded = (state = initialExpanded, action = {}) => {\n    switch (action.type) {\n        case CHANGE_EXPANDED:       //if a CHANGE_SEARCH_FIELD action comes in, we will do something\n            return Object.assign({}, state, { id: action.payload })\n        //1st param= new object\n        //2nd param= state we receiving\n        //3rd param=is what we want to change in the state\n        //so what we return is a new object with everything in the state + new searchField -> 2nd principle: State is read only\n        default:\n            return state    //if a other action comes in, return the state as it was passed over and do not change anything\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'          //importing the provider from the react-redux\n\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\nimport { createLogger } from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { changeRoute, searchPokemon, changeExpanded } from './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ changeRoute, searchPokemon, changeExpanded });       //combine the reducers from the reducers file into one root reducer\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunkMiddleware, logger)));\n//to create the store with the root reducer and apply the thunkMiddleware and the logger to the store\n\nReactDOM.render(\n    <Provider store={store} >\n        <App />\n    </Provider>, document.getElementById('root'));\n//render the provider with the app to the html tag with root as id (is in public/index.html)\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\n/*\nScroll is a wrapping component\n*/\n\nimport './Scroll.css';\n\nconst Scroll = (props) => {\n    const { scrollContainer } = props;\n    return (\n        <div ref={scrollContainer} className=\"scrollContainer\">\n            {props.children}        {/* scroll will use it's children to render here*/}\n        </div>\n    );\n}\n\n\nexport default Scroll;"],"sourceRoot":""}
{"version":3,"sources":["components/Scroll.js","constants.js","components/Layout/LoadingSpinner/LoadingSpinner.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundry.js","components/Layout/Header/Header.js","components/Layout/TechnologyInfoButton/TechnologyInfoButton.js","components/Layout/ImprintButton/ImprintButton.js","containers/MainPage/MainPage.js","api/api.js","containers/App.js","actions.js","serviceWorker.js","reducers.js","index.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","Scroll","props","a","createElement","className","style","children","INITIAL_ROUTE","IMPRINT_ROUTE","TECHNOLOGYINFO_ROUTE","LoadingSpinner","_ref","swapiLabel","react_default","href","target","rel","CardList","people","morePeoplePending","react","SearchBox","searchChange","aria-label","type","placeholder","onChange","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","setState","Component","Header","nextProps","nextState","onRouteChange","onClick","TechnologyInfoButton","alt","src","ImprintButton","AsyncPageTechnologyInfo","lazy","e","then","bind","AsyncPageImprint","MainPage","getRouteComponent","route","onSearchChange","firstPeoplePending","src_components_SearchBox","components_ErrorBoundry","src_components_CardList","filterPeople","fallback","Layout_LoadingSpinner_LoadingSpinner","filter","person","name","toLowerCase","includes","searchField","onRequestPeople","_this$props","page","Layout_Header_Header","Layout_TechnologyInfoButton_TechnologyInfoButton","Layout_ImprintButton_ImprintButton","getFirstPeople","asyncToGenerator","regenerator_default","mark","_callee","link","nextLink","data","data_json","wrap","_context","prev","next","fetch","sent","json","results","abrupt","stop","_x","apply","arguments","getMorePeople","_ref2","_callee2","tempPeople","i","morePeople","_context2","undefined","concat","toConsumableArray","_x2","replaceSpeciesName","_ref3","_callee4","_context4","Promise","all","map","_ref4","_callee3","_context3","Array","isArray","species","length","_x4","_x5","_x3","App","containers_MainPage_MainPage","connect","changeRoute","searchPeople","requestPeople","dispatch","payload","setRoute","event","value","firstPeople","firstPeopleWSpecies","morePeopleWSpecies","position","catch","error","Boolean","window","location","hostname","match","initialRoute","initialStateSearch","initialStatePeople","logger","createLogger","rootReducer","combineReducers","action","assign","slice","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","ReactDOM","render","es","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aebc1c6f.chunk.js","sourcesContent":["import React from 'react';\n/*\nScroll is a wrapping component\n*/\n\nimport './Scroll.css';\n\nconst Scroll = (props) => {\n    return (\n        <div className=\"scrollContainer\" style={{  }}>\n            {props.children}        {/* scroll will use it's children to render here*/}\n        </div>\n    );\n};\n\nexport default Scroll;","/*\n* REDUX\n*/\n\nexport const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_FIRST_PEOPLE_PENDING = 'REQUEST_FIRST_PEOPLE_PENDING';\nexport const REQUEST_FIRST_PEOPLE_SUCCESS = 'REQUEST_FIRST_PEOPLE_SUCCESS';\nexport const REQUEST_FIRST_IMAGES_SUCCESS = 'REQUEST_FIRST_IMAGES_SUCCESS';\nexport const REQUEST_FIRST_PEOPLE_FAILED = 'REQUEST_FIRST_PEOPLE_FAILED';\nexport const REQUEST_MORE_PEOPLE_PENDING = 'REQUEST_MORE_PEOPLE_PENDING';\nexport const REQUEST_MORE_PEOPLE_SUCCESS = 'REQUEST_MORE_PEOPLE_SUCCESS';\nexport const REQUEST_MORE_IMAGES_PENDING = 'REQUEST_MORE_IMAGES_PENDING';\nexport const REQUEST_MORE_IMAGES_SUCCESS = 'REQUEST_MORE_IMAGES_SUCCESS';\nexport const REQUEST_MORE_PEOPLE_FAILED = 'REQUEST_MORE_PEOPLE_FAILED';\nexport const CHANGE_ROUTE = 'CHANGE_ROUTE';\n\n/*\n* REACT\n*/\nexport const INITIAL_ROUTE = 'main';\nexport const IMPRINT_ROUTE = 'imprint';\nexport const TECHNOLOGYINFO_ROUTE = 'technology';","import React from 'react'\n\nimport './LoadingSpinner.css';\n\n\nconst LoadingSpinner = ({ swapiLabel }) => {\n    return (\n        <div className=\"loadingContainer\">\n            <div className=\"circleLoading\"></div>\n            {\n                swapiLabel &&\n                <span className=\"morePeopleLoading\">fetching from <a href=\"https://swapi.co\" target=\"_blank\" rel=\"noopener noreferrer\">swapi.co</a></span>\n            }\n        </div>\n    );\n}\n\nexport default LoadingSpinner;\n","import React, { Fragment } from 'react';\nimport Card from './Card';\nimport LoadingSpinner from './Layout/LoadingSpinner/LoadingSpinner'\n\nimport './CardList.css';\n\nconst CardList = ({ people, morePeoplePending }) => {          //using people array as props\n    /*\n    if (true) {\n        throw new Error('noooo!');          this would throw an error to test the error boundry written in ErrorBoundry.js\n    }*/\n    return (\n        <Fragment>  {/* this fragment is to wrap all returned cards, but will avoid a additional wrap div */}\n            {   //wrap in curly brackets cause it's javascript\n                /*  people.map((person, i) => {           //for each user in people array\n                      return (                        //return of the map function \n                          <Card\n                              key={i}\n                              id={i}\n                              name={person.name}\n                              height={person.height}\n                              mass={person.mass}\n                              birth_year={person.birth_year}\n                              species={person.species}\n                          />);\n                  })*/\n                <div className=\"noapiOutter\">\n                    <div className=\"noapiContainer\">\n                        <p>Unfortunately the API <a href=\"https://swapi.co\" target=\"_blank\" rel=\"noopener noreferrer\">swapi.co</a>, where all the Star Wars Data was grabbed from, is down!\n                    <br /><br />Something new will follow pretty soon!</p>\n                    </div>\n                </div>\n\n            }\n            {/*\n                morePeoplePending &&\n                <LoadingSpinner swapiLabel={true} />\n            */}\n        </Fragment>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nimport './SearchBox.css';\n\nconst SearchBox = ({ searchChange }) => {\n    return (\n        <div className=\"pa1\">\n            <input\n                aria-label='Search Characters'\n                className=\"pa3 searchBox\"\n                type='search'\n                placeholder='Search characters'\n                onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch() {        //if an error appears, this function will run = like try/catch in Java\n        this.setState({ hasError: true })       //the state will be set to hasError=true and it will be rerendered \n    }\n\n    render() {\n        if (this.state.hasError) {      //if the error appeared, a proper error message will be displayed\n            return <h1>Ooops. That is not good</h1>\n        }\n        return this.props.children      //will render the cardlist component when no errors appeared\n    }\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\n\nimport './Header.css';\nimport { INITIAL_ROUTE } from '../../../constants';\n\n\nclass Header extends Component {\n    shouldComponentUpdate(nextProps, nextState) {       //the lifecycle hook gives us the ability to restrict the updating of a component    \n        return false;                                   //never update this component! \n    }\n    render() {\n        const { onRouteChange } = this.props;\n        return <h1 className=\"header f1\" onClick={() => onRouteChange(INITIAL_ROUTE)}>Star Wars Characters</h1>;\n    }\n}\n\nexport default Header;","import React from 'react'\n\nimport './TechnologyInfoButton.css';\nimport { TECHNOLOGYINFO_ROUTE } from '../../../constants';\n\n\nconst TechnologyInfoButton = ({ onRouteChange }) => {\n    return <div className=\"TechnologyInfoButtonContainer\"> <img alt=\"Technology Info Button\" className=\"TechnologyInfoButton\" onClick={() => onRouteChange(TECHNOLOGYINFO_ROUTE)} src=\"images/code.png\"></img></div>\n}\n\nexport default TechnologyInfoButton;","import React from 'react'\n\nimport './ImprintButton.css';\nimport { IMPRINT_ROUTE } from '../../../constants';\n\n\nconst ImprintButton = ({ onRouteChange }) => {\n    return <div className=\"ImprintButtonContainer\"> <img alt=\"Imprint Button\" className=\"ImprintButton\" onClick={() => onRouteChange(IMPRINT_ROUTE)} src=\"images/imprint.png\"></img> </div>\n}\n\nexport default ImprintButton;","import React, { Component, Suspense, lazy, Fragment } from 'react';   //destructuring (instead of React.Component)\n\nimport {\n    INITIAL_ROUTE,\n    IMPRINT_ROUTE,\n    TECHNOLOGYINFO_ROUTE\n} from '../../constants'       //get constants form constants file\n\nimport CardList from '../../components/CardList';\nimport SearchBox from '../../components/SearchBox';\nimport Scroll from '../../components/Scroll';\nimport ErrorBoundry from '../../components/ErrorBoundry';\nimport Header from '../../components/Layout/Header/Header';\nimport LoadingSpinner from '../../components/Layout/LoadingSpinner/LoadingSpinner';\nimport TechnologyInfoButton from '../../components/Layout/TechnologyInfoButton/TechnologyInfoButton';\n\n\nimport './MainPage.css'; //to import the appropriate css file for this component\nimport ImprintButton from '../../components/Layout/ImprintButton/ImprintButton';\n\n\nconst AsyncPageTechnologyInfo = lazy(() => import('../../components/Pages/TechnologyInfo/TechnologyInfo'));\nconst AsyncPageImprint = lazy(() => import('../../components/Pages/Imprint/Imprint'));\n\nclass MainPage extends Component {   //class App will use the component lib / Component expects that there is a render function in this class\n\n    getRouteComponent = (route, onSearchChange, firstPeoplePending, morePeoplePending) => {\n\n        if (route === INITIAL_ROUTE) {\n            return (\n                <Fragment>\n                    <SearchBox searchChange={onSearchChange} />\n                    <Scroll>\n                        <ErrorBoundry>\n                            {\n                                /*firstPeoplePending ?  //return html back depending on the isPending flag\n                                <LoadingSpinner swapiLabel={true} />\n                                :*/\n                                <CardList people={this.filterPeople()} morePeoplePending={morePeoplePending} />\n                            }\n                        </ErrorBoundry>\n                    </Scroll>\n                </Fragment>\n            )\n        } else if (route === IMPRINT_ROUTE) {\n            return (\n                <Suspense fallback={<LoadingSpinner swapiLabel={false} />}>\n                    <AsyncPageImprint />\n                </Suspense>\n            )\n        } else if (route === TECHNOLOGYINFO_ROUTE) {\n            return (\n                <Suspense fallback={<LoadingSpinner swapiLabel={false} />}>\n                    <AsyncPageTechnologyInfo />\n                </Suspense>\n            )\n        }\n    }\n\n    componentDidMount() {\n        this.props.onRequestPeople();\n    }\n    filterPeople = () => {\n        return this.props.people.filter(person => {      //filter the people and return them to filteredpeople\n            return person.name.toLowerCase().includes(this.props.searchField.toLowerCase());\n        });\n    }\n\n    render() {\n        const { route, onRouteChange, onSearchChange, firstPeoplePending, morePeoplePending } = this.props;\n        let page = this.getRouteComponent(route, onSearchChange, firstPeoplePending, morePeoplePending);\n\n        return (\n            <div className='tc' >\n                <div className='wrapper'>\n                    <Header onRouteChange={onRouteChange} />\n                    {page}\n                </div>\n                <TechnologyInfoButton onRouteChange={onRouteChange} />\n                <ImprintButton onRouteChange={onRouteChange} />\n            </div>\n        )\n    }\n}\nexport default MainPage;\n\n//connect is a higher order function - will return another function -> that's why it is written that way above\n//\n//connect() is subscribed to the redux store now and it accepts 2 params: \n//1st is mapStateToProps: what state the component is interested in\n//2nd is mapDispatchToProps: ","export const getFirstPeople = async (link) => {\n    let nextLink = \"\";\n    let data = await fetch(link);\n    let data_json = await data.json();\n    let people = data_json.results;\n    nextLink = await data_json.next;\n    return { people, nextLink };\n}\n\nexport const getMorePeople = async (link) => {\n    let tempPeople = [];\n    let nextLink = undefined;\n\n    for (let i = 0; i < 6; i++) {\n        link = (nextLink === undefined) ? link : nextLink;\n        let data = await fetch(link);\n        let data_json = await data.json();\n        let morePeople = data_json.results;\n\n        nextLink = await data_json.next;\n        tempPeople = [...tempPeople, ...morePeople];\n    }\n    return tempPeople;\n}\n\n\nexport const replaceSpeciesName = async (people) => {\n    return await Promise.all(\n        people.map(async (person, i) => {\n            if (Array.isArray(person.species) && person.species.length) {\n\n                let data = await fetch(person.species[0]);\n                let data_json = await data.json();\n                person.species = await data_json.name;\n                return person;\n            }\n            else {\n                return person;\n            }\n        })\n    );\n}\n","import React, { Component } from 'react';   //destructuring (instead of React.Component)\nimport { connect } from 'react-redux';\nimport MainPage from './MainPage/MainPage'\n\nimport { setRoute, setSearchField, requestPeople } from '../actions'\n\nconst mapStateToProps = state => {\n    return {\n        route: state.changeRoute.route,\n        searchField: state.searchPeople.searchField,            //prop searchfield will get the state of the searchPeople.searchField\n        firstPeoplePending: state.requestPeople.firstPeoplePending,               // -''-\n        morePeoplePending: state.requestPeople.morePeoplePending,\n        people: state.requestPeople.people                      // -''-\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        //onSearchChange is a function which will pass the event to it's inner \n        //there the dispatch will get called which will call the setSearchField action in redux and \n        //it will hand over the event.target.value (which is the stuff typed in the search box)\n        onRouteChange: (route) => dispatch(setRoute(route)),\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestPeople: () => dispatch(requestPeople())                    //requestPeople needs the dispatch function\n    }\n}\n\nclass App extends Component {   //only the react \n    render() {\n        return <MainPage {...this.props} />\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n//connect is a higher order function - will return another function -> that's why it is written that way above\n//\n//connect() is subscribed to the redux store now and it accepts 2 params: \n//1st is mapStateToProps: what state the component is interested in\n//2nd is mapDispatchToProps: ","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_FIRST_PEOPLE_PENDING,\n    REQUEST_FIRST_PEOPLE_SUCCESS,\n    REQUEST_FIRST_IMAGES_SUCCESS,\n    REQUEST_MORE_PEOPLE_PENDING,\n    REQUEST_MORE_PEOPLE_SUCCESS,\n    REQUEST_MORE_IMAGES_SUCCESS,\n    REQUEST_FIRST_PEOPLE_FAILED,\n    CHANGE_ROUTE\n} from './constants'       //get constants form constants file\n\n\nimport { getFirstPeople, getMorePeople, replaceSpeciesName } from './api/api';\n\n//first action in here - this action will receive input of text which the user types - it will return a object with type and payload\n//this action will send the object on to the reducer\nexport const setRoute = (route) => ({\n    type: CHANGE_ROUTE,                  //constants are usually capitalized - we use a variable here to avoid misspelling \n    payload: route\n})\n\n\n\n//first action in here - this action will receive input of text which the user types - it will return a object with type and payload\n//this action will send the object on to the reducer\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,                  //constants are usually capitalized - we use a variable here to avoid misspelling \n    payload: text\n})\n\n//actions can just be objects {}\n\nexport const requestPeople = () => (dispatch) => {          //this action will take the dispatch to get access to it - requestPeople returns a function and thunk middleware will hook on it\n    dispatch({ type: REQUEST_FIRST_PEOPLE_PENDING });             //dispatch the pending action - \"will call the action in reducer\" - so the PENDING will be called right away\n    getFirstPeople('https://swapi.co/api/people/')         //make this http request & convert it to JSON                    \n        .then(firstPeople => dispatch({ type: REQUEST_FIRST_PEOPLE_SUCCESS, payload: firstPeople.people, next: firstPeople.nextLink }))        //call the SUCCESS in reducer with the user payload\n        .then(firstPeople => {\n            replaceSpeciesName(firstPeople.payload)\n                .then(firstPeopleWSpecies => {\n                    dispatch({ type: REQUEST_FIRST_IMAGES_SUCCESS, payload: firstPeopleWSpecies });\n                    dispatch({ type: REQUEST_MORE_PEOPLE_PENDING });\n                    getMorePeople(firstPeople.next)\n                        .then(morePeople => dispatch({ type: REQUEST_MORE_PEOPLE_SUCCESS, payload: morePeople }))\n                        .then(morePeople => {\n                            replaceSpeciesName(morePeople.payload)\n                                .then(morePeopleWSpecies => {\n                                    dispatch({ type: REQUEST_MORE_IMAGES_SUCCESS, payload: { people: morePeopleWSpecies, position: firstPeople.payload.length } });\n                                })\n                        })\n                })\n        })\n        .catch(error => dispatch({ type: REQUEST_FIRST_PEOPLE_FAILED, payload: error }))\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    console.log(\"process env: \" + process.env.PUBLIC_URL);\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n\n  }\n}\n\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n\n","import {\n    INITIAL_ROUTE,\n    CHANGE_SEARCH_FIELD,\n    REQUEST_FIRST_PEOPLE_PENDING,\n    REQUEST_FIRST_PEOPLE_SUCCESS,\n    REQUEST_FIRST_IMAGES_SUCCESS,\n    REQUEST_MORE_PEOPLE_PENDING,\n    REQUEST_MORE_PEOPLE_SUCCESS,\n    REQUEST_MORE_IMAGES_SUCCESS,\n    REQUEST_FIRST_PEOPLE_FAILED,\n    CHANGE_ROUTE\n} from './constants'       //get constants form constants file\n\n\n\n\n\n\n/**\n * CHANGEROUTE REDUCER\n */\n\n\n//define the initialstate in the reducer \nconst initialRoute = {\n    route: INITIAL_ROUTE         //initial object in the redux store\n}\n\n//searchPeople function -> use default params (initialState, empty action object)\n//reducers get a input of a state and action -> if this one get something we care about (like searching people), we will do something\nexport const changeRoute = (state = initialRoute, action = {}) => {\n    switch (action.type) {\n        case CHANGE_ROUTE:       //if a CHANGE_SEARCH_FIELD action comes in, we will do something\n            return Object.assign({}, state, { route: action.payload })\n        //1st param= new object\n        //2nd param= state we receiving\n        //3rd param=is what we want to change in the state\n        //so what we return is a new object with everything in the state + new searchField -> 2nd principle: State is read only\n        default:\n            return state    //if a other action comes in, return the state as it was passed over and do not change anything\n    }\n}\n\n\n\n\n/**\n * SEARCHPEOPLE REDUCER\n */\n\n\n//define the initialstate in the reducer \nconst initialStateSearch = {\n    searchField: ''         //initial object in the redux store\n}\n\n//searchPeople function -> use default params (initialState, empty action object)\n//reducers get a input of a state and action -> if this one get something we care about (like searching people), we will do something\nexport const searchPeople = (state = initialStateSearch, action = {}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:       //if a CHANGE_SEARCH_FIELD action comes in, we will do something\n            return Object.assign({}, state, { searchField: action.payload })\n        //1st param= new object\n        //2nd param= state we receiving\n        //3rd param=is what we want to change in the state\n        //so what we return is a new object with everything in the state + new searchField -> 2nd principle: State is read only\n        default:\n            return state    //if a other action comes in, return the state as it was passed over and do not change anything\n    }\n}\n\n/**\n * REQUESTING PEOPLE REDUCER\n */\n\n\n\nconst initialStatePeople = {\n    firstPeoplePending: false,\n    morePeoplePending: false,\n    people: [],\n    error: ''\n}\n\nexport const requestPeople = (state = initialStatePeople, action = {}) => {\n    switch (action.type) {\n        case REQUEST_FIRST_PEOPLE_PENDING:\n            return Object.assign({}, state, { firstPeoplePending: true })      //everything in the state + new state isPending\n        case REQUEST_FIRST_PEOPLE_SUCCESS:\n            return Object.assign({}, state, { people: action.payload, firstPeoplePending: false })      //everything in the state + new state isPending & people\n        case REQUEST_FIRST_IMAGES_SUCCESS:\n            return Object.assign({}, state, { people: action.payload })      //everything in the state + new state isPending & people\n        case REQUEST_MORE_PEOPLE_PENDING:\n            return Object.assign({}, state, { morePeoplePending: true })      //everything in the state + new state isPending\n        case REQUEST_MORE_PEOPLE_SUCCESS:\n            return Object.assign({}, state, { people: state.people.concat(action.payload), morePeoplePending: false })      //everything in the state + new state isPending & people\n        case REQUEST_MORE_IMAGES_SUCCESS:\n            return Object.assign({}, state, { people: [...state.people.slice(0, action.payload.position), ...action.payload.people] })      //everything in the state + new state isPending & people\n        case REQUEST_FIRST_PEOPLE_FAILED:\n            return Object.assign({}, state, { firstPeoplePending: false, error: action.payload })      //everything in the state + errorstate\n        default:\n            return state\n    }\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'          //importing the provider from the react-redux\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\nimport { createLogger } from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';      //to use tachyons lib\nimport { changeRoute, searchPeople, requestPeople } from './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ changeRoute, searchPeople, requestPeople });       //combine the reducers from the reducers file into one root reducer\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunkMiddleware, logger)));\n//to create the store with the root reducer and apply the thunkMiddleware and the logger to the store\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n//render the provider with the app to the html tag with root as id (is in public/index.html)\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}